{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./bin/coolpal","webpack:///./lib/cli/index.js","webpack:///./lib/cli/program.js","webpack:///./lib/cli/startCommand.js","webpack:///./lib/coolpal.js","webpack:///./lib/plugins/coinbase/plugin.js","webpack:///./lib/plugins/feature-request/plugin.js","webpack:///./lib/plugins/google-news/plugin.js","webpack:///./lib/plugins/hello_world/plugin.js","webpack:///./lib/plugins/help/plugin.js","webpack:///./lib/plugins/index.js","webpack:///./lib/plugins/plugin.js","webpack:///./lib/plugins/spam/plugin.js","webpack:///./lib/plugins/utils.js","webpack:///./lib/plugins/weather/plugin.js","webpack:///./lib/util.js","webpack:///external \"axios\"","webpack:///external \"babel-runtime/core-js/get-iterator\"","webpack:///external \"babel-runtime/core-js/object/get-prototype-of\"","webpack:///external \"babel-runtime/core-js/promise\"","webpack:///external \"babel-runtime/helpers/asyncToGenerator\"","webpack:///external \"babel-runtime/helpers/classCallCheck\"","webpack:///external \"babel-runtime/helpers/createClass\"","webpack:///external \"babel-runtime/helpers/inherits\"","webpack:///external \"babel-runtime/helpers/possibleConstructorReturn\"","webpack:///external \"babel-runtime/regenerator\"","webpack:///external \"commander\"","webpack:///external \"discord.js\"","webpack:///external \"fs\"","webpack:///external \"google-news-rss\"","webpack:///external \"source-map-support/register\"","webpack:///external \"weather-js\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","a","parse","process","argv","default","_ref","program","version","command","description","option","action","_asyncToGenerator3","_regenerator2","mark","_callee","cmd","config_filename","wrap","_context","prev","next","config","StartCommand","run","stop","undefined","_x","apply","this","arguments","_util","obj","_classCallCheck3","readFileAsync","data","configuration","JSON","CoolPal","start","_index","client","Discord","Client","discord_token","token","env","COOLPAL_DISCORD_TOKEN","prefix","_event_types","_plugins","_pal_config","_configure_plugins","plugins","_login","_ready","_receive_events","plugin_config","plugin_class","plugin_name_to_class","plugins_config","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","_getIterator3","done","_register_plugin","_configure_plugin","err","return","plugin","push","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","supported_event_types","event_type","includes","login","on","console","log","_this","event","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","handle_event","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_receive_event","utils","CoinbasePlugin","pal","length","_possibleConstructorReturn3","__proto__","_getPrototypeOf2","base_url","axios","coin_command_to_url_string","btc","eth","coin","message","command_args","split_message","prefixed_command","author","username","user","reply","help","valid_coin","call_coinbase_api","method","url","coin_price_url","then","response","reply_msg","amount","catch","error","Plugin","FeatureRequestPlugin","_feature_requests","request","split_command","feature_request","slice","join","store_request_for_user","reply_message","requests_for_user","GoogleNewsPlugin","google_news","googleNewsRss","call_google_news_rss","search_query","search","String","resp","title","link","msg","HelloWorldPlugin","content","startsWith","HelpPlugin","channel","send","color","spam","SpamPlugin","helloworld","weather","WeatherPlugin","coinbase","feature-request","google-news","handle_message","spam_times","Number","NaN","_i","repeat","content_array","split","lowercase_content_array","item","toLowerCase","capitalize","word","charAt","toUpperCase","times","f","Array","fill","map","_","weather_client","city","call_weather_js","weather_result","build_message","_this2","_promise2","resolve","reject","find","degreeType","result","location","current","date","observationtime","temperature","feelslike","skytext","humidity","winddisplay","filename","fs","readFile","require"],"mappings":"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","file":"bin.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./bin/coolpal\");\n","import cli from \"../lib/cli\";\ncli.parse(process.argv)\n","export { default } from \"./program\";\n","import program from \"commander\";\nimport StartCommand from \"./startCommand\";\n\nprogram.version(\"0.0.1\", \"v\", \"--version\");\n\nprogram\n  .command(\"start\")\n  .description(\"start coolpal\")\n  .option(\"-c\", \"--config\", \"configuration file name\")\n  .action(async cmd => {\n    let config_filename = cmd.config ? cmd.config : \"coolpal.config.json\";\n    const command = new StartCommand({\n      config_filename: config_filename\n    });\n    await command.run();\n  });\n\nexport default program;\n","import { readFileAsync } from \"../util\";\nimport CoolPal from \"../coolpal\";\n\nexport default class StartCommand {\n  constructor(obj) {\n    this.config_filename = obj.config_filename || \"coolpal.config.json\";\n  }\n\n  async run() {\n    let data = await readFileAsync(this.config_filename);\n    let configuration = JSON.parse(data);\n    let pal = new CoolPal(configuration);\n    pal.start();\n  }\n}\n","import Discord from \"discord.js\";\nimport { plugin_name_to_class } from \"./plugins/index\";\n\n/**\n * CoolPal is a bot for Discord with plugins.\n *\n * @example\n * // Copy the plugin configuration file from examples and fill in API keys\n * // and the Discord API token\n * fs.readFile('path/to/your/configuration/file.json', (err, data) => {\n *   if (err) {\n *     throw err;\n *   }\n *\n *   let configuration = JSON.parse(data);\n *\n *   let pal = new CoolPal(configuration);\n *   pal.start();\n * });\n */\nclass CoolPal {\n  /**\n   * Create your pal.\n   *\n   * @constructs CoolPal\n   *\n   * @param {string} config.token - A token for the Discord API.\n   * @param {Object[]} config.plugins - Plugins to enable.\n   * @param {string} config.plugins[].name - The name of a plugin.\n   * @param {Object} config.plugins[].configuration - Configuration specific to the plugin.\n   *\n   * @todo Throw an error if no token is provided.\n   */\n  constructor(config) {\n    /**\n     * @member {Object} CoolPal#client - A Discord API client.\n     */\n    this.client = new Discord.Client();\n\n    /**\n     * @member {Object} CoolPal#discord_token - A Discord bot API token.\n     */\n    this.discord_token = config.token || process.env.COOLPAL_DISCORD_TOKEN;\n\n    /**\n     * @member {Object[]} CoolPal#prefix - The prefix for all plugin commands.\n     */\n    this.prefix = config.prefix || \"!\";\n\n    /**\n     * @member {Object[]} CoolPal#_event_types - A list of unique event types.\n     * @private\n     */\n    this._event_types = [];\n\n    /**\n     * @member {Object[]} CoolPal#_plugins - A list of configured plugin instances.\n     * @private\n     */\n    this._plugins = [];\n\n    /**\n     * @member {Object} CoolPal#_pal_config - The high level configuration object for CoolPal.\n     * It is the original configuration passed in during initialization.\n     */\n    this._pal_config = config;\n\n    // End of member variables\n    this._configure_plugins(config.plugins);\n  }\n\n  /**\n   * Return a list of plugins\n   *\n   * @return {Object[]} A list of plugin for this instance.\n   *\n   * @example\n   * // Iterate over the plugins\n   * for (let plugin of pal.plugins) {\n   *   console.log(plugin.command)\n   * }\n   *\n   */\n  get plugins() {\n    return this._plugins;\n  }\n\n  /**\n   * Starts the event loop.\n   *\n   * @example\n   * let pal = CoolPal({\n   *   token: process.env.DISCORD_TOKEN,\n   *   plugins: []\n   * });\n   * pal.start();\n   */\n  start() {\n    this._login();\n    this._ready();\n    this._receive_events();\n  }\n\n  /**\n   * Creates an instance of a plugin using a plugin config\n   *\n   * @param {Object} plugin_config - The configuration object for a plugin\n   * @param {string} plugin_config.name - The name of the plugin\n   * @param {Object} plugin_config.configuration - An object that changes plugin functionality\n   *\n   * @returns An instance of the class corresponding to plugin_config.name\n   * @private\n   */\n  _configure_plugin(plugin_config) {\n    let plugin_class = plugin_name_to_class[plugin_config.name];\n    return new plugin_class(this, plugin_config.configuration);\n  }\n\n  /**\n   * Instantiates multiple plugins based on a configuration file.\n   *\n   * @param {Object[]} plugins_config - Highest level configuration object for multiple plugins.\n   *\n   * @private\n   */\n  _configure_plugins(plugins_config) {\n    for (let plugin_config of plugins_config) {\n      this._register_plugin(this._configure_plugin(plugin_config));\n    }\n  }\n\n  /**\n   * Adds a plugin to the instance and configured event types to handle new events.\n   *\n   * @param {Object} plugin - A single configured plugin that extends Plugin.\n   * @private\n   */\n  _register_plugin(plugin) {\n    this._plugins.push(plugin);\n\n    for (let event_type of plugin.supported_event_types) {\n      if (!this._event_types.includes(event_type)) {\n        this._event_types.push(event_type);\n      }\n    }\n  }\n\n  /**\n   * Logs in to the Discord API.\n   *\n   * @private\n   */\n  _login() {\n    this.client.login(this.discord_token);\n  }\n\n  /**\n   * Logs in to the Discord API.\n   *\n   * @private\n   *\n   * @todo Allow user to set their ready message\n   */\n  _ready() {\n    this.client.on(\"ready\", () => {\n      console.log(\"Just saying im ready\");\n    });\n  }\n\n  /**\n   * Register an event type to be received by all plugins.\n   *\n   * @private\n   *\n   * @todo Allow user to set their ready message\n   */\n  _receive_event(event_type) {\n    this.client.on(event_type, event => {\n      for (let plugin of this._plugins) {\n        plugin.handle_event(event_type, event);\n      }\n    });\n  }\n\n  /**\n   * Registers all event types to be receives by all plugins.\n   *\n   * @private\n   */\n  _receive_events() {\n    for (let event_type of this._event_types) {\n      this._receive_event(event_type);\n    }\n  }\n}\n\nmodule.exports = CoolPal;\n","import axios from \"axios\";\nimport * as utils from \"../utils\";\nimport Plugin from \"../plugin\";\n\n/**\n * This plugin allows users to check the current currency values from CoinBase.\n **/\nclass CoinbasePlugin extends Plugin {\n  /**\n   * @constructs CoinbasePlugin\n   * Overloaded from {@link Plugin#constructor}\n   */\n  constructor(pal, config = {}) {\n    super(pal, config);\n\n    /**\n     * Overloaded from {@link Plugin#command}\n     */\n    this.command = \"coinbase\";\n\n    /**\n     * Overloaded from {@link Plugin#supported_event_types}\n     */\n    this.supported_event_types = [\"message\"];\n\n    /**\n     * @member {string} CoinbasePlugin#url - Coinbase url.\n     */\n    this.base_url =\n      config.base_url || \"https://api.coinbase.com/v2/prices/BTC-USD/buy\";\n\n    /**\n     * @member {Object} CoinbasePlugin#axois - An axios client.\n     */\n    this.axios = config.axios || axios.create();\n\n    /**\n     * @member {Object} CoinbasePlugin#coin_command_to_url_string - Maps an\n     * expected coin input to a string for the Coinbase API.\n     */\n    this.coin_command_to_url_string = {\n      btc: \"BTC-USD\",\n      eth: \"ETH-USD\"\n    };\n  }\n\n  /**\n   * @returns {string} A help message\n   */\n  get help() {\n    return (\n      \"\\n\\nCheck Coinbase for current coin prices\\n\\n\" +\n      this.prefixed_command +\n      \" list\\n\" +\n      \"Displays the available coins\\n\\n\" +\n      this.prefixed_command +\n      \" eth\\n\" +\n      \"Prints the current ETH value\\n\\n\" +\n      this.prefixed_command +\n      \" btc\\n\" +\n      \"Print the current BTC value\\n\\n\"\n    );\n  }\n\n  /**\n   * @param {string} coin - Either eth or btc\n   * @returns {string} A url of the form\n   * 'https://api.coinbase.com/v2/prices/BTC-USD/buy'\n   */\n  coin_price_url(coin) {\n    return (\n      this.base_url +\n      \"/prices/\" +\n      this.coin_command_to_url_string[coin] +\n      \"/buy\"\n    );\n  }\n\n  /**\n   * @returns {bool} true if the coin is supported, or false\n   */\n  valid_coin(coin) {\n    if (this.coin_command_to_url_string[coin]) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Sends the user a message about a coin price from Coinbase.\n   *\n   * @param {Object} message - A Discord message event\n   * @returns {bool} true if this plugin handled the event, or false\n   */\n  handle_message(message) {\n    let command_args = utils.split_message(message);\n\n    if (command_args[0] != this.prefixed_command) {\n      return false;\n    }\n\n    if (message.author.username === this.pal.client.user.username) {\n      return true;\n    }\n\n    if (command_args[1] === undefined || command_args[1] === \"help\") {\n      message.reply(this.help);\n      return true;\n    }\n\n    if (command_args[1] === \"list\") {\n      let reply_msg =\n        \"\\nAvailable Coinbase coins\\n\\n\" +\n        \"btc - BTC to USD\\n\" +\n        \"eth - ETH to USD\\n\";\n      message.reply(reply_msg);\n      return true;\n    }\n\n    // No coin provided in message\n    if (!this.valid_coin(command_args[1])) {\n      message.reply(this.help);\n      return true;\n    }\n    return this.call_coinbase_api(message, command_args[1]);\n  }\n\n  /**\n   * Sends the user a message about the current Coinbase price.\n   *\n   * @param {Object} message - A Discord message event\n   * @returns {bool} true if this plugin handled the event, or fales\n   */\n  call_coinbase_api(message, coin) {\n    this.axios({\n      method: \"get\",\n      url: this.coin_price_url(coin)\n    })\n      .then(response => {\n        let reply_msg = \"\\nFrom Coinbase | Current \";\n        if (coin === \"eth\") {\n          reply_msg += \"ETH in USD: $\";\n        } else {\n          reply_msg += \"BTC in USD: $\";\n        }\n        reply_msg += response.data.data.amount;\n        message.reply(reply_msg);\n        return true;\n      })\n      .catch(error => {\n        console.log();\n        return true;\n      });\n  }\n}\n\nmodule.exports = CoinbasePlugin;\n","import * as utils from \"../utils\";\nimport Plugin from \"../plugin\";\n\n/**\n * This plugin allows users to make feature requests and check on their status.\n **/\nclass FeatureRequestPlugin extends Plugin {\n  /**\n   * @constructs FeatureRequestPlugin\n   * Overloaded from {@link Plugin#constructor}\n   * @todo Add an e-mail list for the feature requests\n   */\n  constructor(pal, config = {}) {\n    super(pal, config);\n\n    /**\n     * Overloaded from {@link Plugin#command}\n     */\n    this.command = \"feature-request\";\n\n    /**\n     * Overloaded from {@link Plugin#supported_event_types}\n     */\n    this.supported_event_types = [\"message\"];\n\n    /**\n     * @member {string[]} FeatureRequestPlugin#_feature_requests - Feature requests by user.\n     *\n     * @private\n     */\n    this._feature_requests = {};\n  }\n\n  /**\n   * @param {string} username - A Discord username\n   * @returns {string[]} An array of feature requests\n   */\n  requests_for_user(username) {\n    if (this._feature_requests[username] === undefined) {\n      this._feature_requests[username] = [];\n    }\n    return this._feature_requests[username];\n  }\n\n  /**\n   * @param {string} request - A new feature request\n   * @param {string} username - A Discord username\n   * @returns {string[]} An array of feature requests\n   */\n  store_request_for_user(request, username) {\n    if (this._feature_requests[username] === undefined) {\n      this._feature_requests[username] = [];\n    }\n    this._feature_requests[username].push(request);\n  }\n\n  /**\n   * @returns {string} A help message\n   */\n  get help() {\n    return (\n      \"This plugin will allow you to make new plugin requests\\n\\n\" +\n      this.prefixed_command +\n      \" help\\n\" +\n      \"Displays this message again.\\n\\n\" +\n      this.prefixed_command +\n      \" new this is where you type a request\\n\" +\n      \"Adds a new request\\n\\n\" +\n      this.prefixed_command +\n      \" list\\n\" +\n      \"List the requests you have made\\n\"\n    );\n  }\n\n  /**\n   * Handles the message event for this plugin.\n   *\n   * @param {Object} message - A Discord message event\n   * @returns {bool} true if this plugin handled the event, or fales\n   */\n  handle_message(message) {\n    let split_command = utils.split_message(message);\n    if (split_command[0] != this.prefixed_command) {\n      return false;\n    }\n\n    if (message.author.username === this.pal.client.user.username) {\n      return true;\n    }\n\n    if (split_command[1] === \"new\") {\n      let feature_request = split_command.slice(2).join(\" \");\n      this.store_request_for_user(feature_request, message.author.username);\n      message.reply(\n        \"Added the following to your feature requests:\\n\" + feature_request\n      );\n    } else if (split_command[1] === \"list\") {\n      let reply_message = \"Here are your feature requests:\\n\";\n      for (let request of this.requests_for_user(message.author.username)) {\n        reply_message += request + \"\\n\";\n      }\n      message.reply(reply_message);\n    } else {\n      message.reply(this.help);\n    }\n\n    return true;\n  }\n}\n\nmodule.exports = FeatureRequestPlugin;\n","import Plugin from \"../plugin\";\nimport * as utils from \"../utils\";\nimport googleNewsRss from \"google-news-rss\";\n\n/**\n * This plugin allows users to obtain a search result based on a search query.\n **/\nclass GoogleNewsPlugin extends Plugin {\n  /**\n   * @constructs CoinbasePlugin\n   * Overloaded from {@link Plugin#constructor}\n   */\n  constructor(pal, config = {}) {\n    super(pal, config);\n\n    /**\n     * Overloaded from {@link Plugin#command}\n     */\n    this.command = \"news\";\n\n    /**\n     * Overloaded from {@link Plugin#supported_event_types}\n     */\n    this.supported_event_types = [\"message\"];\n\n    /**\n     * @member {Object} google_news - A client for accessing the Google News RSS API\n     */\n    this.google_news = config.google_news || new googleNewsRss();\n  }\n\n  /**\n   * @returns {string} A help message\n   */\n  get help() {\n    return (\n      \"\\nFetch news from Google\\n\\n\" +\n      \"!news help\\n\" +\n      \"Displays this message\\n\" +\n      \"!news any topics\\n\" +\n      \"Replies with a search result from Google\\n\"\n    );\n  }\n\n  /**\n   *\n   * Replies to a user's message with a search result from Google\n   *\n   * @param {Object} message - A Discord message event\n   * @returns {bool} true if this plugin handled the event, or false\n   */\n  handle_message(message) {\n    let command_args = utils.split_message(message);\n    if (command_args[0] != this.prefixed_command) {\n      return false;\n    }\n    if (message.author.username === this.pal.client.user.username) {\n      return true;\n    }\n    if (command_args[1] === undefined || command_args[1] === \"help\") {\n      message.reply(this.help);\n      return true;\n    }\n    // Query Google News for the top story related to message\n    return this.call_google_news_rss(message);\n  }\n\n  /**\n   *\n   * Parse message for search query, format, and reply to the message.\n   * If the call succeeds, only the top result from google news given to the user.\n   * If the call fails, the bot will reply to the user with a message and the\n   * search query.\n   *\n   * resp contains multiple search results accessible via resp[n]\n   *\n   * @param {Object} message - A Discord message event\n   * @returns {bool} true if this plugin handled the event, or false\n   */\n  call_google_news_rss(message) {\n    let search_query = utils\n      .split_message(message)\n      .slice(1)\n      .join(\" \");\n    this.google_news\n      .search(String(search_query))\n      .then(resp => {\n        message.reply(\n          \"\\nThe Top Result from Google News. . .\\n\\n\" +\n            \"------------------------------------\\n\" +\n            \"Query: \" +\n            search_query +\n            \"\\n\" +\n            \"------------------------------------\\n\\n\" +\n            resp[0].title +\n            \"\\n\\n\" +\n            resp[0].link +\n            \"\\n\"\n        );\n        return true;\n      })\n      .catch(error => {\n        let msg = \"Failed to get results for \" + search_query + \"\\n\";\n        message.reply(msg);\n        console.log(msg);\n        return true;\n      });\n    return true;\n  }\n}\n\nmodule.exports = GoogleNewsPlugin;\n","import Plugin from \"../plugin.js\";\n\nclass HelloWorldPlugin extends Plugin {\n  constructor(pal, config = {}) {\n    super(pal, config);\n    this.command = \"helloworld\";\n    this.supported_event_types = [\"message\"];\n  }\n\n  handle_message(message, config) {\n    // Make sure author of the message is not the bot\n    if (message.content.startsWith(this.prefixed_command)) {\n      if (message.author.username != this.pal.client.user.username) {\n        message.reply(\"Hello, world!\");\n      }\n      return true;\n    }\n    return false;\n  }\n}\n\nmodule.exports = HelloWorldPlugin;\n","import * as utils from \"../utils\";\nimport Plugin from \"../plugin\";\n\n/**\n * This plugin presents a general help message, or a help message per plugin\n **/\nclass HelpPlugin extends Plugin {\n  /**\n   * @constructs HelpPlugin\n   * Overloaded from {@link Plugin#constructor}\n   */\n  constructor(pal, config = {}) {\n    super(pal, config);\n\n    /**\n     * Overloaded from {@link Plugin#command}\n     */\n    this.command = \"help\";\n\n    /**\n     * Overloaded from {@link Plugin#supported_event_types}\n     */\n    this.supported_event_types = [\"message\"];\n  }\n\n  /**\n   * @returns {string} A help message\n   */\n  get help() {\n    return (\n      \"\\n\\nRequest help for a plugin:\\n\\n\" +\n      \"!help list\\n\" +\n      \"Lists plugins that you can request help for\\n\\n\" +\n      \"!help help\\n\" +\n      \"Prints this message\\n\\n\" +\n      \"!help <supported_plugin>\\n\" +\n      \"Prints the help for a supported plugin (see !help list)\\n\\n\"\n    );\n  }\n\n  /**\n   * Sends the user a help message.\n   *\n   * @param {Object} message - A Discord message event\n   * @returns {bool} true if this plugin handled the event, or false\n   */\n  handle_message(message) {\n    let command_args = utils.split_message(message);\n    if (command_args[0] != this.prefixed_command) {\n      return false;\n    }\n    if (message.author.username === this.pal.client.user.username) {\n      return true;\n    }\n    if (command_args[1] === undefined || command_args[1] === \"help\") {\n      message.channel.send(utils.color(this.help, \"green\"));\n      return true;\n    }\n    if (command_args[1] === \"list\") {\n      let reply_msg =\n        \"\\nHere are commands with help available.\\n\" +\n        \"Call one with !help <command>\\n\";\n      for (let plugin of this.pal.plugins) {\n        if (plugin.help != undefined) {\n          reply_msg += plugin.command + \"\\n\";\n        }\n      }\n      message.channel.send(utils.color(reply_msg, \"green\"));\n      return true;\n    }\n\n    for (let plugin of this.pal.plugins) {\n      if (plugin.command === command_args[1]) {\n        // Help message exists, so reply to message\n        if (plugin.help != undefined) {\n          message.channel.send(utils.color(plugin.help, \"green\"));\n          return true;\n        }\n        // Help is not implemented on plugin\n        message.reply(plugin.command + \" does not have a help message.\\n\");\n        return true;\n      }\n    }\n    // Plugin does not exist\n    message.reply(command_args[1] + \" is not a valid command.\\n\");\n    return true;\n  }\n}\n\nmodule.exports = HelpPlugin;\n","import SpamPlugin from \"./spam/plugin\";\nimport HelloWorldPlugin from \"./hello_world/plugin\";\nimport WeatherPlugin from \"./weather/plugin\";\nimport CoinbasePlugin from \"./coinbase/plugin\";\nimport FeatureRequestPlugin from \"./feature-request/plugin.js\";\nimport HelpPlugin from \"./help/plugin.js\";\nimport GoogleNewsPlugin from \"./google-news/plugin.js\";\n\nlet plugin_name_to_class = {\n  spam: SpamPlugin,\n  helloworld: HelloWorldPlugin,\n  weather: WeatherPlugin,\n  coinbase: CoinbasePlugin,\n  \"feature-request\": FeatureRequestPlugin,\n  help: HelpPlugin,\n  \"google-news\": GoogleNewsPlugin\n};\n\nexport { plugin_name_to_class };\n","/**\n * Plugin is an abstract class providing an interface for consuming Discord events.\n */\nclass Plugin {\n  /**\n   * @constructs Plugin\n   * @param {Object} pal - A {@link CoolPal} instance.\n   * @param {Object} [config={}] - The optional configuration for a plugin.\n   */\n  constructor(pal, config = {}) {\n    /**\n     * @member {Object} pal - A reference to the calling {@link CoolPal} instance.\n     */\n    this.pal = pal;\n\n    /**\n     * @member {string} Plugin#command - The base command a user types to access\n     * this plugin.\n     */\n    this.command = \"\";\n\n    /**\n     * @member {string[]} Plugin#supported_event_types - A list of events\n     * implemented. The only supported event type right now is message.\n     */\n    this.supported_event_types = [];\n\n    /**\n     * @member {char} Plugin#prefix - A char to prefix commands for the bot to execute\n     */\n    this.prefix = \"!\";\n  }\n\n  /**\n   * Maps an event type to a handler for the plugin. The only supported event\n   *\n   * @param {string} event_type - A Discord API supported event type.\n   * @param {Object} event - An event from the Discord API.\n   * @param {Object} config - Configuration from a CoolPal instance.\n   * @param {string} config.prefix - The prefix for a command. Default is '!'.\n   * @param {Object} config.client - A Discord client instance.\n   *\n   * @todo Implement more event types\n   *\n   * @todo Deprecate passing in a config for a member variable called 'pal' that\n   * offers the same functionality\n   */\n  handle_event(event_type, event) {\n    if (event_type == \"message\") {\n      return this.handle_message(event);\n    }\n    return false;\n  }\n\n  /**\n   * Generate the prefixed command for this plugin. Used to match against when\n   * checking user input.\n   * @returns {string} A prefix appended to the command name defined for the plugin.\n   */\n  get prefixed_command() {\n    return this.prefix + this.command;\n  }\n\n  /**\n   * Abstract method for handling the message event. The plugin extending this\n   * class is responsible for returning true if the message was handled, and\n   * false otherwise.\n   *\n   * @param {Object} event - An event from the Discord API.\n   * @param {Object} config - Configuration from a CoolPal instance.\n   * @param {string} config.prefix - The prefix for a command. Default is '!'.\n   * @param {Object} config.client - A Discord client instance.\n   *\n   * @returns {bool} false\n   *\n   * @todo Deprecate passing in a config for a member variable called 'pal' that\n   * offers the same functionality\n   */\n  handle_message(message) {\n    return false;\n  }\n}\n\nmodule.exports = Plugin;\n","import * as utils from \"../utils\";\nimport Plugin from \"../plugin\";\n\nclass SpamPlugin extends Plugin {\n  constructor() {\n    super();\n    this.command = \"spam\";\n    this.supported_event_types = [\"message\"];\n  }\n\n  handle_message(message, config) {\n    let command_args = utils.split_message(message);\n    // Make sure author of the message is not the bot\n    if (command_args[0] != this.prefixed_command) {\n      return false;\n    }\n\n    let spam_times = Number(command_args[1]);\n    if (!spam_times && spam_times != NaN) {\n      message.reply(\"Usage: /spam [number of times]\");\n    }\n\n    if (message.author.username != config.client.user.username) {\n      let reply = \"\";\n      for (let _i = 0; _i < spam_times; ++_i) {\n        reply += \"SPAM!!! \".repeat(10) + \"SPAM!!!\\n\";\n        if (_i % 22 == 0) {\n          message.reply(reply);\n          reply = \"\";\n        }\n      }\n      message.reply(reply);\n    }\n    return true;\n  }\n}\n\nmodule.exports = SpamPlugin;\n","/**\n * TODO: This interface needs to be vastly improved to easily handle CLI-like args\n *       I wonder if commander can take a string?\n **/\nexport function split_message(message) {\n  let content_array = message.content.split(\" \");\n  let lowercase_content_array = [];\n  for (let item of content_array) {\n    lowercase_content_array.push(item.toLowerCase());\n  }\n  return lowercase_content_array;\n}\n\nexport function capitalize(word) {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n}\n\nexport function times(n) {\n  return f => {\n    Array(n)\n      .fill()\n      .map((_, i) => f(i));\n  };\n}\n\n/**\n * Use code-block as a workaround to get some colorization.\n *\n * @argument {string} s - The string that will be colored.\n * @argument {color} A string representing one of the available colors\n *\n * Returns the original string if the color doesn't exist.\n */\nexport function color(s, color) {\n  if (color === \"green\") return \"```css\\n\" + s + \"\\n```\";\n  if (color === \"yellow\") return \"```fix\\n\" + s + \"\\n```\";\n  return s;\n}\n","import weather from \"weather-js\";\nimport * as utils from \"../utils\";\nimport Plugin from \"../plugin.js\";\n\nclass WeatherPlugin extends Plugin {\n  constructor(pal, config = {}) {\n    super(pal, config);\n\n    /**\n     * The name for this command\n     */\n    this.command = \"weather\";\n\n    /**\n     * The weather API client.\n     *\n     * This is an instance variable so a mock can easily be injected for testing.\n     **/\n    this.weather_client = config.weather_client || weather;\n\n    /**\n     * The event types this plugin supports\n     * @type {string[]}\n     */\n    this.supported_event_types = [\"message\"];\n  }\n\n  /**\n   * @returns {string} A help message\n   */\n  get help() {\n    return (\n      \"\\nCheck the current weather\\n\\n\" +\n      this.prefixed_command +\n      \" help\\n\" +\n      \"Displays this message again.\\n\" +\n      this.prefixed_command +\n      \" Denton\\n\" +\n      \"Replies with the weather conditions for Denton\\n\" +\n      this.prefixed_command +\n      \" Denton, TX\\n\" +\n      \"Replies with the weather conditions for Denton, TX\\n\" +\n      this.prefixed_command +\n      \" 98121\\n\" +\n      \"Replies with the weather conditions for the Zipcode 98121\\n\"\n    );\n  }\n\n  async handle_message(message, config) {\n    let command_args = utils.split_message(message);\n    if (command_args[0] != this.prefixed_command) {\n      return false;\n    }\n    // End run if the bot is the creator of the message\n    if (message.author.username == this.pal.client.user.username) {\n      return true;\n    }\n    let city = command_args[1];\n    if (command_args[2]) {\n      city = city + command_args[2];\n    }\n\n    let weather_result = await this.call_weather_js(city);\n    message.reply(this.build_message(weather_result));\n\n    return true;\n  }\n\n  call_weather_js(city) {\n    return new Promise((resolve, reject) => {\n      this.weather_client.find(\n        {\n          search: city,\n          degreeType: \"F\"\n        },\n        function(err, result) {\n          if (err) reject(err);\n          resolve(result);\n        }\n      );\n    });\n  }\n\n  build_message(result) {\n    return (\n      \"Current forecast for: \" +\n      result[0].location.name +\n      \"\\n\" +\n      \"Date: \" +\n      result[0].current.date +\n      \"\\n\" +\n      \"Observation Time: \" +\n      result[0].current.observationtime +\n      \"\\n\" +\n      \"Temperature (in F): \" +\n      result[0].current.temperature +\n      \"\\n\" +\n      \"Feels like (in F): \" +\n      result[0].current.feelslike +\n      \"\\n\" +\n      \"Conditions: \" +\n      result[0].current.skytext +\n      \"\\n\" +\n      \"Humidity: \" +\n      result[0].current.humidity +\n      \"\\n\" +\n      \"Wind: \" +\n      result[0].current.winddisplay +\n      \"\\n\"\n    );\n  }\n}\n\nmodule.exports = WeatherPlugin;\n","import fs from \"fs\";\n\nfunction readFileAsync(filename) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(filename, (err, data) => {\n      if (err) reject(err);\n      resolve(data);\n    });\n  });\n}\n\nexport { readFileAsync };\n","module.exports = require(\"axios\");","module.exports = require(\"babel-runtime/core-js/get-iterator\");","module.exports = require(\"babel-runtime/core-js/object/get-prototype-of\");","module.exports = require(\"babel-runtime/core-js/promise\");","module.exports = require(\"babel-runtime/helpers/asyncToGenerator\");","module.exports = require(\"babel-runtime/helpers/classCallCheck\");","module.exports = require(\"babel-runtime/helpers/createClass\");","module.exports = require(\"babel-runtime/helpers/inherits\");","module.exports = require(\"babel-runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"babel-runtime/regenerator\");","module.exports = require(\"commander\");","module.exports = require(\"discord.js\");","module.exports = require(\"fs\");","module.exports = require(\"google-news-rss\");","module.exports = require(\"source-map-support/register\");","module.exports = require(\"weather-js\");"],"sourceRoot":""}